#lang racket

;: 1.
;; invert:
;; Proposito:
;; List -> List’ :Procedimiento que recibe como parametro una lista que se compone de pares que a su vez son listas de tamaño 2
;; y se retorna una lista similar a la inicial con los pares invertidos 
;;
;;<lista> := ()
;;        := (<valor-de-scheme> <lista>)
;; Ejemplo de uso:
;; (invert '((1 2) (3 4) (5 6))) => '((2 1) (4 3) (6 5))


(define invert
  (lambda(lista)
    (if (empty? lista)
        '()
        (cons
          (list (cadr (car lista)) (caar lista))
          (invert (rest lista))
          )
     
      )
  ))

;: 2.
;;down:
;; Proposito:
;; List -> List’ :Procedimiento que convierte la lista en una lista donde cada elemento es asociado a un nivel más
;; de parentesis comparado con su estado original 
;;
;;<lista> := ()
;; := (<valor-de-scheme> <lista>)
;;
;; Ejemplo de uso:
;; (down ’(1 2 3)) => '((1) (2) (3))

(define down
  (lambda (lista)
    (if (empty? lista) empty
        (cons (list (car lista)) (down (cdr lista)))
        )
      )
  )

;: 3.
;; Función: list-set
;;
;; Proposito:modificar una lista dada (L) al reemplazar el elemento en la posición específica n (indexando desde cero)
;;con el elemento x proporcionado como argumento. La función devuelve una nueva lista que es idéntica a la lista original (L),
;;excepto que contiene el elemento x en la posición indicada.
;;
;; Parámetros:
;; - lista: representa la lista en la que deseas realizar la modificación.
;; - n: representa la posición (indexando desde cero) en la lista L donde deseas insertar el elemento x.  
;; - x: representa el elemento que deseas insertar en la posición
;;
;; Contrato:
;; (list-set lista n x)
;;  
;;   - Retorna una nueva lista con el elemento x en la posicion n
;;   - Si la lista está vacía, devuelve una lista vacía (empty).
;;
;; Ejemplo de uso:
;; > (list-set ’(a b c d) 2 => ’(1 2))(a b (1 2) d)


(define list-set
  (lambda (lista n x)
  (cond
    [(or (empty? lista) (< n 0)) lista]
    [(zero? n) (cons x (cdr lista))]
    [else (cons (car lista) (list-set (cdr lista) (- n 1) x)) ]
      )
  ))


;: 4.
;; Función: filter-in
;;
;; Proposito: 
;; P x L -> L’: con los dos argumentos recibidos (un predicado P y una lista L) retornar una lista que
;; contiene los elementos que pertenecen a L y que satisfacen el predicado P.
;;
;; <lista> := ()
;; := (<valor-de-scheme> <lista>)
;;
;; Ejemplo de uso:
;; > (filter-in number? '(a 2 (1 3) b 7))


(define filter-in
  (lambda (P L)
    (if (null? L)
        '()
        (if (P (car L))
            (cons (car L) (filter-in P (cdr L)))
            (filter-in P (cdr L))))))



;;5.
;;Función: list-index
;; Propósito:
;;   Esta función recibe un predicado P y una lista L. Retorna (desde una posición inicial 0) el primer elemento de la lista
;;   que satisface el predicado P. Si no se encuentra ningún elemento que cumpla con el predicado, la función retorna #f.
;;
;; Signatura:
;;   (list-index P L)
;; 
;; Expresiones BNF:
;;   <lista> ::= ()
;;           |  (<valor-de-scheme> <lista>)
;;
;; Ejemplos de uso:
;;   (list-index number? '(a 2 (1 3) b 7)) => 1
;;   (list-index symbol? '(a (b c) 17 foo)) => 0
;;   (list-index symbol? '(1 2 (a b) 3)) => #f
;;
;; Requisitos:
;;   - El predicado P debe ser una función unaria que acepta un argumento y retorna un valor booleano.
;;   - La entrada L debe ser una lista que cumpla con la estructura definida por las expresiones BNF.
;;   - La función busca el primer elemento de la lista que satisface el predicado P y retorna su posición (indexando desde 0).
;;   - Si ningún elemento cumple con el predicado, la función retorna #f.
;;


(define list-index
  (lambda (P L)
    (letrec ((list-index-helper
              (lambda (L index)
                (cond
                  [(null? L) #f]
                  [(P (car L)) index]
                  [else (list-index-helper (cdr L) (+ index 1))]
                ))))
      (list-index-helper L 0)
    )
  ))

;: 6.
;; Función: swapper
;; Proposito: Recibe una lista de elementos, y dos elementos, realiza el recorrido de toda la lista, retorna una nueva lista similar modificada, poniendo e2 donde encuentra e1 y viceversa.
;;
;; Entradas:
;; e1: elemento 1
;; e2: elemento 2
;; l: lista de elementos
;;
;; Parámetros:
;; e1 : representa el elemento 1
;; e2 : representa el elemento 2
;; l  : representa la lista de elementos que se recorrera para generar la nueva lista con las modificaciones respectivas donde se encuentre e1 y e2
;;
;; Contrato:
;; (swapper e1 e2 l)
;;  
;;   - Valida si la lista es vacia como caso base.
;;   - Valida si el primer elemento de la lista es igual a e1, de ser asi construye una nueva lista con e2 en la cabeza y sigue contruyendo recursivamente el resto.
;;   - Valida si el primer elemento de la lista es igual a e2, de ser asi construye una nueva lista con e1 en la cabeza y sigue contruyendo recursivamente el resto.
;;   - Si ninguna validacion anterior se cumple, se construye la lista con la cabeza de l y se sigue contruyendo recursivamente con el resto de la lista.
;; Ejemplo de uso:
;; > (swapper 'x 'y '(y y x y x y x x y)))
;; > (swapper 'a 'd '(a d () c d))

(define swapper
  (lambda (e1 e2 l)
    (cond
      [(empty? l) empty]
      [(equal? (car l) e1) (cons e2 (swapper e1 e2 (cdr l)))]
      [(equal? (car l) e2) (cons e1 (swapper e1 e2 (cdr l)))]
      [else (cons (car l)  (swapper e1 e2 (cdr l)))]
      )
    )
  )

;;8.
;;Función: mapping
;; Propósito:
;;   Esta función recibe una función unaria F, y dos listas L1 y L2 de números. Retorna una lista de pares (a, b), donde a es un elemento de L1 y b es un elemento de L2, y se cumple la propiedad de que (F a) = b.
;;
;; Signatura:
;;   (mapping F L1 L2)
;; 
;; Expresiones BNF:
;;   <lista> ::= ()
;;           |  (<valor-de-scheme> <lista>)
;;
;; Ejemplos de uso:
;;   (mapping (lambda (d) (* d 2)) '(1 2 3) '(2 4 6)) => '((1 2) (2 4) (3 6))
;;   (mapping (lambda (d) (* d 3)) '(1 2 2) '(2 4 6)) => '((2 6))
;;   (mapping (lambda (d) (* d 2)) '(1 2 3) '(3 9 12)) => '()
;;
;; Requisitos:
;;   - La función recibe una función unaria F, que toma un argumento y devuelve un número.
;;   - L1 y L2 deben ser listas que cumplan con la estructura definida por las expresiones BNF.
;;   - La función genera pares (a, b) donde a es un elemento de L1 y b es un elemento de L2.
;;   - Se verifica que (F a) = b para cada par (a, b) en la lista resultante.
;;

(define mapping
  (lambda (F L1 L2)
    (define helper
      (lambda (L1 L2)
        (cond
          [(or (null? L1) (null? L2)) '()]
          [(= (F (car L1)) (car L2))
           (cons (list (car L1) (car L2))
                 (helper (cdr L1) (cdr L2)))]
          [else (helper (cdr L1) (cdr L2))]
          )
        )
      )
    (helper L1 L2)
    )
  )





;;--------------------------------------------------------------------
;; 9.
(define inversions
 (lambda (lista)
   (cond
     [(empty? lista) 0]
     [else (+ (aux-inversions (cdr lista) (car lista)) (inversions (cdr lista)) )]
     )
   )
 )

(define aux-inversions
  (lambda (lista x)
    (cond
      [(empty? lista) 0]
      [(if
        (> x (car lista))
        (+ 1 (aux-inversions (cdr lista) x))
        (+ 0 (aux-inversions (cdr lista) x))
        )]
      )
      )
  )
;;--------------------------------------------------------------------
;; 11.
;; Función: zip:
;; Propósito:
;;   Esta función recibe una función binaria F y dos listas L1 y L2 de igual tamaño. Retorna una lista donde la posición n-ésima corresponde al resultado de aplicar la función F sobre los elementos en la posición n-ésima en L1 y L2.
;;
;; Signatura:
;;   (zip F L1 L2)
;; 
;; Expresiones BNF:
;;   <lista> ::= ()
;;           |  (<valor-de-scheme> <lista>)
;;
;; Ejemplos de uso:
;;   (zip + '(1 4) '(6 2)) => '(7 6)
;;   (zip * '(11 5 6) '(10 9 8)) => '(110 45 48)
;;
;; Requisitos:
;;   - La función recibe una función binaria F que toma dos argumentos y devuelve un resultado.
;;   - L1 y L2 deben ser listas que cumplan con la estructura definida por las expresiones BNF.
;;   - Las listas L1 y L2 deben tener el mismo tamaño.
;;   - La función crea una lista donde la posición n-ésima contiene el resultado de aplicar F a los elementos correspondientes de L1 y L2.
;;

(define zip
  (lambda (F L1 L2)
    (if (null? L1)
        '()
        (cons (F (car L1) (car L2))
              (zip F (cdr L1) (cdr L2))))))


;;--------------------------------------------------------------------
;; 12.
(define filter-acum
  (lambda (a b f acum filter)
    (cond
      [(> a b) acum]
      [(filter a) (filter-acum (+ a 1) b f (f acum a) filter)]
      [else (filter-acum (+ a 1) b f acum filter)]
      )
    )
  )

;;---------------------------------------------------------------------
;;14.
;;Función: path
;; Propósito:
;;   Esta función recibe un número entero n y un árbol binario de búsqueda (BST) representado como una lista. Retorna una lista que representa la ruta desde el nodo raíz del árbol hasta el nodo que contiene el número n. La ruta se indica por cadenas "left" y "right".
;;
;; Signatura:
;;   (path n BST)
;; 
;; Expresiones BNF:
;;   <árbol-binario> ::= ()
;;                   |  (<número-entero> <árbol-binario> <árbol-binario>)
;;
;; Ejemplos de uso:
;;   (path 17 '(14 (7 () (12 () ())) (26 (20 (17 () ()) ()) (31 () ())))) => '(right left left)
;;   (path 5 '(10 (5 () ()) (15 (12 () ()) (20 () ())))) => '(left)
;;
;; Requisitos:
;;   - La función recibe un número entero n y un árbol binario de búsqueda (BST) que cumple con la estructura definida por las expresiones BNF.
;;   - La función busca la ruta desde el nodo raíz del árbol hasta el nodo que contiene el número n.
;;   - La ruta se representa como una lista de cadenas "left" y "right".
;;   - Si el número n es encontrado en el nodo raíz, el procedimiento retorna una lista vacía ().
;;
(define path
  (lambda (n BST)
    (define path-helper
      (lambda (current-path current-node)
        (cond
          ((null? current-node) '())
          ((= n (car current-node)) current-path)
          ((< n (car current-node))
           (path-helper (append current-path '("left")) (cadr current-node)))
          (else
           (path-helper (append current-path '("right")) (caddr current-node)))
          )))
    (path-helper '() BST)
    )
  )


;;---------------------------------------------------------------------
;;15.

(define count-odd-and-even
  (lambda (arbol)
    (cond
      [(empty? arbol) '(0 0)]
      [else (list (count-aux arbol even?) (count-aux arbol odd?))]
      )
    ))

(define count-aux
  (lambda (a f)
    (cond
      [(empty? a) 0]
      [(f (car a)) (+ 1 (count-aux (cadr a) f) (count-aux (caddr a) f))]
      [else (+ 0 (count-aux (cadr a) f) (count-aux (caddr a) f))]
      )))  

;;---------------------------------------------------------------------
;;17.
;;Función: prod-scalar-matriz
;; Propósito:
;;   Esta función recibe una matriz representada como una lista de listas y un vector representado como una lista. Retorna el resultado de realizar la multiplicación matriz por vector.
;;
;; Signatura:
;;   (prod-scalar-matriz matriz vector)
;; 
;; Expresiones BNF:
;;   <matriz> ::= ()
;;            |  (<lista> <matriz>)
;;   <lista>  ::= ()
;;            |  (<valor-de-scheme> <lista>)
;;
;; Ejemplos de uso:
;;   (prod-scalar-matriz '((1 1) (2 2)) '(2 3)) => '((2 3) (4 6))
;;   (prod-scalar-matriz '((1 1) (2 2) (3 3)) '(2 3)) => '((2 3) (4 6) (6 9))
;;
;; Requisitos:
;;   - La función recibe una matriz como una lista de listas y un vector como una lista.
;;   - La matriz y el vector deben cumplir con la estructura definida por las expresiones BNF.
;;   - La función realiza la multiplicación de la matriz por el vector.
;;
(define prod-scalar-matriz
  (lambda (matriz vector)
    (define producto-fila
      (lambda (fila vector)
        (if (null? fila)
            '()
            (cons (* (car fila) (car vector))
                  (producto-fila (cdr fila) (cdr vector))))))
    
    (define multiplicar-matriz
      (lambda (matriz vector)
        (cond
          ((null? matriz) '())
          (else
           (cons (producto-fila (car matriz) vector)
                 (multiplicar-matriz (cdr matriz) vector))))))

    (multiplicar-matriz matriz vector))
  )

;;---------------------------------------------------------------------
;;18.


(define agregar-inicio
  (lambda (lista x)
    (cons x lista)
      )
  )

(define agregar-final
  (lambda (lista x)
    (cond
      [(empty? lista) (cons x empty)]
      [else (cons (car lista) (agregar-final (cdr lista) x))] 
      )
    ))

(define suma-listas
  (lambda (l1 l2)
    (cond
      [(empty? l1) empty]
      [else (cons (+ (car l1) (car l2)) (suma-listas (cdr l1) (cdr l2)) )]
      )
    ))

(define pascal
  (lambda (n)
    (aux-pascal n 1 '(1))
    ))

(define aux-pascal
  (lambda (n step lista)
    (cond
      [(= step n) lista]
      [else (aux-pascal n (+ step 1) (suma-listas (agregar-inicio lista 0) (agregar-final lista 0) ))
       ]
      )
    )
  )
